// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(30)
  code      String   @unique
  members   GroupMember[]
}

model GroupMember {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  owner     Boolean  @default(false)
  approved  Boolean  @default(false)

  @@id([userId, groupId])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_type String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groupMember   GroupMember?
  admin         Boolean   @default(false)
  sentInviteEmailAt DateTime?
  preferences   Preference?
  travelId      Int?
  travel        Travel?     @relation(fields: [travelId], references: [id])
  hideFromExport  Boolean  @default(false)
}

enum PreferenceTypeOfRoom {
  QUIET
  PARTY
}

enum PreferenceDietaryRequirements {
  NONE
  VEGAN
  VEGETARIAN
}

model Preference {
  id          Int                   @id @default(autoincrement())
  userId      Int                   @unique
  user        User                  @relation(fields: [userId], references: [id])
  typeOfRoom  PreferenceTypeOfRoom? @default(QUIET)
  dietary     PreferenceDietaryRequirements? @default(NONE)
  comments    String?
}

model Travel {
  id          Int                   @id @default(autoincrement())
  fromId      Int
  from        Location              @relation("TravelFromLocation", fields: [fromId], references: [id])
  toId        Int
  to          Location              @relation("TravelToLocation", fields: [toId], references: [id])
  departTime  DateTime
  returnTime  DateTime
  users       User[]
}

model Location {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  fromTravels Travel[]  @relation("TravelFromLocation")
  toTravels   Travel[]  @relation("TravelToLocation")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ImportLogStatus {
  IN_PROGRESS
  COMPLETE
  ERROR
}

model ImportLog {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  status          ImportLogStatus
  content         Json
  numberOfRecords Int
  userImportLogs  UserImportLog[]
}

enum UserImportLogStatus {
  NEW
  SKIP
  ERROR
  NO_EMAIL
}

model UserImportLog {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  status      UserImportLogStatus
  message     String?
  importLogId Int
  importLog   ImportLog @relation(fields: [importLogId], references: [id])
}
